#! /usr/bin/python
# -*- coding: utf-8 -*-

import sys
import csv
import functools

# CONSTANTS
DELIMITER_CSV = "\t"
DELTA_TIMES_KEY = r"\\.\sys\Interval(secs)"
PREFIX_PROCESS_NAME = r"\\.\Process("
SUFIX_PROCESS_NAME = r")\%CPU"
#MONITORING_PROCESS_KEY = r"\\.\Process(Java(TM) Platform SE binary 5460)\CPU Power W"

def read_datafile(csvfile):
	""" Get all data from .xls file generated by IPPET """
	data = []
	with open(csvfile, 'r') as f:
		lines = f.readlines()

	r = csv.DictReader(lines, delimiter=DELIMITER_CSV)
	for line in r:
		data.append(line)

	return data

def get_application_data(data, process_key):
	""" Filter application data """
	applicationData = list(filter(lambda x: x[process_key] != "0", data))
	return applicationData

def calculate_energy(data, process_name):
	""" Calculate energy consumption
	return (process name, computational time, usage cpu, total joules, watts)
	"""
	try:
		monitoring_power_process_key = [s for s in data[0] if process_name in s and "CPU Power" in s][0]
		monitoring_usage_process_key = [s for s in data[0] if process_name in s and "%" in s][0]
	except:
		return (process_name, 0, 0, 0, 0)

	appData = get_application_data(data, monitoring_usage_process_key)

	delta_times = [float(x[DELTA_TIMES_KEY]) for x in appData]
	watts_times = [float(x[monitoring_power_process_key]) for x in appData]
	usage_times = [float(x[monitoring_usage_process_key]) for x in appData]

	joules = [x*y for x, y in zip(watts_times, delta_times)]

	# Energy profile information
	computational_time = sum(delta_times)
	cpu_usage = functools.reduce(lambda x, y: x + y, usage_times) / len(usage_times)
	consumed_energy = sum(joules)
	watts = consumed_energy/computational_time

	# Complete process name
	start_process_name = monitoring_usage_process_key.find(PREFIX_PROCESS_NAME) + len(PREFIX_PROCESS_NAME)
	end_process_name = monitoring_usage_process_key.find(SUFIX_PROCESS_NAME, start_process_name)
	complete_process_name = monitoring_usage_process_key[start_process_name:end_process_name]

	#return (complete_process_name, computational_time, cpu_usage, consumed_energy, watts)
	return [complete_process_name, computational_time, cpu_usage, consumed_energy, watts]

def get_energy_profile(csvfile, process_name):
	"""
	Return the energy profile for a process using the data in a .xls file generated with the IPPET tool.
	"""
	data = read_datafile(csvfile)
	return calculate_energy(data, process_name)


def print_results(results):
	print("Process name: " + results[0])
	print("Computational time (s): ", results[1])
	print("CPU usage (%): ", results[2])
	print("Consumed energy (J): ", results[3])
	print("Consumed power (W): ", results[4])

if __name__ == "__main__":
	if len(sys.argv) != 3:
		print("Usage:")
		print("python ippetparser.py <filename> <process_name>")
	else:
		filename = sys.argv[1]
		process_name = sys.argv[2]

		results = get_energy_profile(filename, process_name)
		print_results(results)
